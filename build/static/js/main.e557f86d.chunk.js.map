{"version":3,"sources":["serviceWorker.ts","lib/favicons/OriginalPrusaConnectFavicon.tsx","lib/favicons/OriginalPrusaIconsFavicon.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","OriginalPrusaConnectFavicon","props","xmlns","width","height","fillRule","clipRule","imageRendering","shapeRendering","textRendering","viewBox","fill","bgColor","d","shadowColor","fgColor","defaultProps","OriginalPrusaIconsFavicon","Div","styled","div","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BCRAC,EAA8B,SAACC,GACjC,OACI,yBAAKC,MAAM,6BAA6BC,MAAOF,EAAME,MAAOC,OAAQH,EAAMG,OAAQC,SAAS,UAAUC,SAAS,UAAUC,eAAe,kBAAkBC,eAAe,qBAAqBC,cAAc,qBAAqBC,QAAQ,mBACpO,0BAAMC,KAAMV,EAAMW,QAASC,EAAE,wBAC7B,0BAAMF,KAAMV,EAAMa,YAAaT,SAAS,UAAUQ,EAAE,4PACpD,0BAAMF,KAAMV,EAAMc,QAASV,SAAS,UAAUQ,EAAE,8PAK7Cb,IAEfA,EAA4BgB,aAAe,CACvCb,MAAO,GACPC,OAAQ,GACRW,QAAS,UACTD,YAAa,UACbF,QAAS,WCjBb,IAAMK,EAA4B,SAAChB,GAC/B,OACI,yBAAKC,MAAM,6BAA6BC,MAAOF,EAAME,MAAOC,OAAQH,EAAMG,OAAQM,QAAQ,kBAAkBL,SAAS,UAAUC,SAAS,UAAUC,eAAe,kBAAkBC,eAAe,qBAAqBC,cAAc,sBACjO,0BAAME,KAAMV,EAAMW,QAASC,EAAE,wBAC7B,uBAAGR,SAAS,WACR,0BAAMM,KAAMV,EAAMa,YAAaD,EAAE,oCACjC,0BAAMF,KAAMV,EAAMc,QAASF,EAAE,sCAM9BI,I,4GAEfA,EAA0BD,aAAe,CACrCb,MAAO,GACPC,OAAQ,GACRW,QAAS,UACTD,YAAa,UACbF,QAAS,WCrBb,IAAMM,E,KAAMC,EAAOC,IAAV,KAeMC,MATf,WACE,OACE,kBAACH,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,eCZNI,EAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SJiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e557f86d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\ninterface IProps {\r\n    width?: number,\r\n    height?: number,\r\n    fgColor?: string,\r\n    shadowColor?: string,\r\n    bgColor?: string,\r\n}\r\n\r\nconst OriginalPrusaConnectFavicon = (props: IProps) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props.width} height={props.height} fillRule=\"evenodd\" clipRule=\"evenodd\" imageRendering=\"optimizeQuality\" shapeRendering=\"geometricPrecision\" textRendering=\"geometricPrecision\" viewBox=\"0 0 50.68 50.68\">\r\n            <path fill={props.bgColor} d=\"M0 0h50.68v50.68H0z\" />\r\n            <path fill={props.shadowColor} fillRule=\"nonzero\" d=\"M42.3 22.22c-.23-7.8-7.75-12.24-14.78-12.24-9.84 0-16.14 7.48-16.14 16.86 0 9.38 6.3 16.86 16.14 16.86 8.2 0 14.28-4.85 14.78-13.24h-8.43c-.32 3.76-2.54 5.98-6.53 5.98-5.44 0-7.52-4.76-7.52-9.61s2.09-9.61 7.52-9.61c3.58 0 6.03 1.72 6.53 4.99h8.43z\" />\r\n            <path fill={props.fgColor} fillRule=\"nonzero\" d=\"M40.8 20.72c-.23-7.8-7.75-12.24-14.78-12.24-9.84 0-16.14 7.48-16.14 16.86 0 9.38 6.3 16.86 16.14 16.86 8.2 0 14.28-4.85 14.78-13.24h-8.43c-.32 3.76-2.54 5.98-6.53 5.98-5.44 0-7.52-4.76-7.52-9.61s2.09-9.61 7.52-9.61c3.58 0 6.03 1.72 6.53 4.99h8.43z\" />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default OriginalPrusaConnectFavicon\r\n\r\nOriginalPrusaConnectFavicon.defaultProps = {\r\n    width: 48,\r\n    height: 48,\r\n    fgColor: '#fefefe',\r\n    shadowColor: '#2b2a29',\r\n    bgColor: '#fa6831'\r\n}","import React from 'react'\r\n\r\ninterface IProps {\r\n    width?: number,\r\n    height?: number,\r\n    fgColor?: string,\r\n    shadowColor?: string,\r\n    bgColor?: string,\r\n}\r\n\r\nconst OriginalPrusaIconsFavicon = (props: IProps) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props.width} height={props.height} viewBox=\"0 0 62.38 62.38\" fillRule=\"evenodd\" clipRule=\"evenodd\" imageRendering=\"optimizeQuality\" shapeRendering=\"geometricPrecision\" textRendering=\"geometricPrecision\">\r\n            <path fill={props.bgColor} d=\"M0 0h62.38v62.38H0z\" />\r\n            <g fillRule=\"nonzero\">\r\n                <path fill={props.shadowColor} d=\"M27.29 52.95h10.37V13.12H27.29z\" />\r\n                <path fill={props.fgColor} d=\"M25.44 51.1h10.38V11.27H25.44z\" />\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default OriginalPrusaIconsFavicon\r\n\r\nOriginalPrusaIconsFavicon.defaultProps = {\r\n    width: 48,\r\n    height: 48,\r\n    fgColor: '#fefefe',\r\n    shadowColor: '#2b2a29',\r\n    bgColor: '#fa6831'\r\n}","import {\n  OriginalPrusaConnectFavicon,\n  OriginalPrusaIconsFavicon\n} from './lib'\n\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Div = styled.div`\n  svg {\n        margin: 10px;\n  }\n`\n\nfunction App() {\n  return (\n    <Div>\n      <OriginalPrusaConnectFavicon />\n      <OriginalPrusaIconsFavicon />\n    </Div>\n  )\n}\n\nexport default App\n","import * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}